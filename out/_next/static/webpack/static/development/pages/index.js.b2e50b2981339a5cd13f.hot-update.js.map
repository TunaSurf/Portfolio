{"version":3,"file":"static/webpack/static/development/pages/index.js.b2e50b2981339a5cd13f.hot-update.js","sources":["webpack:///./components/ProjectPreviewImage.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { Parallax } from 'react-scroll-parallax';\nimport css from 'styled-jsx/css'\n\nclass ProjectPreviewImage extends Component {\n\n  render() {  \n    //Not a fan that I had to essentially use the same styled-jsx markup \n    //twice to avoid an error in compiling the jsx when using a const.\n    //Would much prefer to keep the code DRY\n\n    if (this.props.mobile) {\n      return (\n        <div className=\"parallax-container\">\n          <img src={`${this.props.image}/preview.png`} alt={`${this.props.name} preview`} className=\"base-img\" />\n          <style jsx>{`\n            * {\n              pointer-events: none;\n            }\n            .parallax-container {\n              height: 100%;\n              width: 400px;\n              position: absolute;\n              top: 0;\n              right: 5%;\n              overflow: hidden;\n              display: flex;\n              align-items: center;\n            }\n            img {\n              user-select: none;\n            }\n            .base-img {\n              position: absolute;\n              top: 0;\n              left: 0;\n            }\n            .base-img {\n              width: 100%;\n              height: 100%;\n            }\n            @media screen and (max-width: 750px) {\n              .parallax-container {\n                right: 0;\n              }\n            }\n            @media screen and (max-width: 600px) {\n              .parallax-container {\n                width: 300px;\n              }\n            }\n            @media screen and (max-width: 500px) {\n              .parallax-container {\n                right: -50px;\n              }\n            }\n          `}</style>\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"parallax-container\">\n          <img src={`${this.props.image}/base.png`} alt={`${this.props.name} preview`} className=\"base-img\" />\n          <Parallax\n            offsetYMax={10}\n            offsetYMin={-10}\n            disabled={this.props.mobile}\n          >\n            <img src={`${this.props.image}/top.png`} className=\"top-img\" />\n          </Parallax>\n          <style jsx>{`\n            * {\n              pointer-events: none;\n            }\n            .parallax-container {\n              height: 100%;\n              width: 400px;\n              position: absolute;\n              top: 0;\n              right: 5%;\n              overflow: hidden;\n              display: flex;\n              align-items: center;\n            }\n            img {\n              user-select: none;\n            }\n            .base-img {\n              position: absolute;\n              top: 0;\n              left: 0;\n            }\n            .top-img {\n              position: relative;\n              top: 0;\n              left: 0;\n            }\n            .base-img, .top-img {\n              width: 100%;\n              height: 100%;\n            }\n            @media screen and (max-width: 750px) {\n              .parallax-container {\n                right: 0;\n              }\n            }\n            @media screen and (max-width: 600px) {\n              .parallax-container {\n                width: 300px;\n              }\n            }\n            @media screen and (max-width: 500px) {\n              .parallax-container {\n                right: -50px;\n              }\n            }\n          `}</style>\n        </div>\n      )\n    }\n  }\n};\n\nexport default ProjectPreviewImage;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AA8CA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AA0DA;AACA;;;;AApHA;AACA;AAoHA;AAEA;;;;A","sourceRoot":""}